package org.zerock.myapp.genson;

import java.util.concurrent.TimeUnit;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestInstance.Lifecycle;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.Timeout;
import org.zerock.myapp.domain.Foo;

import com.owlike.genson.Genson;

import lombok.NoArgsConstructor;
import lombok.extern.log4j.Log4j2;


@Log4j2
@NoArgsConstructor

@TestInstance(Lifecycle.PER_CLASS)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class GensonTests {
	
	// @Disabled
	@Test
	@Order(1)
	@DisplayName("1. testSerialize")
	@Timeout(value = 3, unit = TimeUnit.SECONDS)
	void testSerialize() {
		
		log.trace("testSerialize() invoked.");
		
		Foo obj = new Foo(300, "momomomo");
		log.info("\t + 1. obj : {}", obj);
		// + 1. obj : Foo(id=300, name=momomomo)
		
		Genson genson = new Genson();
		String json = genson.serialize(obj);
		log.info("\t + 2. serialize json : {}", json);
		// + 2. serialize json : {"id":300,"name":"momomomo"}
		// + genson의 경우 serialize / deserialize를 통해서 변환 / 역변환이 가능하다.
		
	} // testSerialize
	
	// ===================================================
	
	// @Disabled
	@Test
	@Order(2)
	@DisplayName("2. testDeSerialize")
	@Timeout(value = 3, unit = TimeUnit.SECONDS)
	void testDeSerialize() {
		
		log.trace("testDeSerialize() invoked.");
		
		String json = "{\"id\":300,\"name\":\"momomomo\"}";
		
		Genson genson = new Genson();
		Foo foo = genson.<Foo>deserialize(json, Foo.class);
		log.info("\t + 3. deserialize java : {}", foo);
		
	} // testDeSerialize
	
	// ===================================================

} // end class
